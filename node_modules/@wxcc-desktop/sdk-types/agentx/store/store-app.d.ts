import { CssDynamic } from "../app/components/CssDynamic";
import { Store } from "./index";
import { Chat, EmailComposer, PciComplianceSettings } from "@agentx/agentx-mfe-react-based";
import { WxmWrapper } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare class ModuleApp {
    constructor();
    title: string;
    logo: string;
    taskAreaCollapsed: boolean;
    auxilliaryPanelCollapsed: boolean;
    defaultMaximizeAreaName: string;
    darkThemeEnabled: boolean;
    darkMode: boolean;
    wasAskedPwaInstall: boolean;
    showAuxPanelAsOverlay: boolean;
    changeTeamLoading: boolean;
    isStationLoginOpen: boolean;
    changeTeamsError: boolean;
    /**
     * WXM
     */
    wxmEnabled: boolean;
    userModel: WxmWrapper.ResponseData;
    featureFlags: {
        isCareAttachmentEnabled: boolean;
        isVideoEnabled: boolean;
        isCloudCherryEnabled: boolean;
        isDigitalFFEnabled: boolean;
        isPCIComplianceEnabled: boolean;
        isDynamicDesktopLayoutEnable: boolean;
        isDesktopOutdialAniEnabled: boolean;
        isRONAPopoverEnabled: boolean;
        isChangeTeamsEnabled: boolean;
    };
    pciCompliance: {
        action: string;
        isAttachmentEnabled: boolean;
    };
    /**
     * Computed values to simplify passing data to Web Components
     */
    get chatConfigs(): Chat.ChatConfigs;
    get pciSettings(): PciComplianceSettings;
    get emailConfigs(): EmailComposer.EmailConfigs;
    get cssDynamicVars(): CssDynamic.AgentXVars;
    loginAgentWithNewTeam(stationLoginData: Service.Aqm.Agent.StationLogin): Promise<import("../../../agentx-services/dist/types/core/aqm-reqs").Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Available" | "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentStationLoginSuccess";
    }> | undefined>;
    getAgentDN(): string | null;
    getDefaultAuxCode(): string | undefined;
    logoutFromCurrentTeam(selectedTeam: Service.Conf.Team): Promise<void>;
    /**
     * Actions
     */
    updateTitle(title: string): void;
    updateLogo(logoUrl: string): void;
    toggleDarkMode(isEnabled: boolean): void;
    updateWxmEnabled(isEnabled: boolean): void;
    updateStationLoginOpen(isOpen: boolean): void;
    setChangeTeamsLoginFailed(isError: boolean): void;
    updateUserModel(access_token: WxmWrapper.ResponseData["access_token"], expires_in: WxmWrapper.ResponseData["expires_in"]): void;
    updateFeatureFlags(featureFlags: Store.App.FeatureFlagConfigs | undefined): void;
    updatePciCompliance(pciComplianceSettings: PciComplianceSettings | undefined): void;
    toggleTaskAreaCollapse(): void;
    toggleAuxilliaryPanelCollapse(): void;
    setShowAuxPanelAsOverlay(showAuxPanelAsOverlayParam: boolean): void;
    checkPwaInstall(): Promise<void>;
    setAskedPwaInstall(): void;
    setChangeTeamLoading(changeTeamLoading: boolean): void;
    changeAgentTeam(selectedTeam: Service.Conf.Team): void;
}
declare module "@/store" {
    namespace Store.App {
        type FeatureFlagConfigs = {
            isCareAttachmentEnabled: boolean;
            isPCIComplianceEnabled: boolean;
            isVideoEnabled: boolean;
            isDigitalFFEnabled: boolean;
            isCloudCherryEnabled: boolean;
            isDynamicDesktopLayoutEnable: boolean;
            isDesktopOutdialAniEnabled: boolean;
            isRONAPopoverEnabled: boolean;
            isChangeTeamsEnabled: boolean;
        };
        type WxmCred = {
            apiKey: string;
            wxmUser: string;
        };
        type WxmUserParams = {
            spaceId: string;
            metricId: string;
        };
    }
}
export declare const app: ModuleApp;

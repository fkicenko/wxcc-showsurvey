import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { HttpReqs } from "../../core/http-reqs";
import { Service } from "../../index";
import Agent = Service.Aqm.Agent;
import Failure = Service.Aqm.Global.Failure;
/**
 * aqmAgent
 * @param reqs
 * @category AQM Service
 */
export declare function aqmAgent(aqm: AqmReqs, http: HttpReqs): {
    reload: (cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        dn: string;
        orgId: string;
        interactionIds: string[];
        status: "LoggedIn";
        subStatus: "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        lastStateChangeReason?: string | undefined;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentReloginSuccess";
    }>>) => void) | undefined) => Promise<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        dn: string;
        orgId: string;
        interactionIds: string[];
        status: "LoggedIn";
        subStatus: "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        lastStateChangeReason?: string | undefined;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentReloginSuccess";
    }>>;
    logout: (p: {
        data: Agent.Logout;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        type: "AgentLogoutSuccess";
    }>>) => void) | undefined) => Promise<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        type: "AgentLogoutSuccess";
    }>>;
    stationLogin: (p: {
        data: Agent.StationLogin;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Idle" | "Available";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentStationLoginSuccess";
    }>>) => void) | undefined) => Promise<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Idle" | "Available";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentStationLoginSuccess";
    }>>;
    stateChange: (p: {
        data: Agent.StateChange;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: "Idle" | "Available";
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        type: "AgentStateChangeSuccess";
    }>>) => void) | undefined) => Promise<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: "Idle" | "Available";
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        type: "AgentStateChangeSuccess";
    }>>;
    mockOutdialAniList: (p: unknown, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        data: Record<string, any>;
    }>>) => void) | undefined) => Promise<Msg<{
        data: Record<string, any>;
    }>>;
    fetchAddressBooks: (p: unknown, cb?: ((res: import("axios").AxiosResponse<Agent.AddressBooks>) => void) | undefined) => Promise<Agent.AddressBooks>;
    eMockOutdialAniList: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        data: Record<string, any>;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                data: Record<string, any>;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            data: Record<string, any>;
        }>>;
    };
    eAgentDNRegistered: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        eventType: "RoutingMessage";
        agentId: string;
        trackingId: string;
        dn: string;
        orgId: string;
        type: "AgentDNRegistered";
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                eventType: "RoutingMessage";
                agentId: string;
                trackingId: string;
                dn: string;
                orgId: string;
                type: "AgentDNRegistered";
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            eventType: "RoutingMessage";
            agentId: string;
            trackingId: string;
            dn: string;
            orgId: string;
            type: "AgentDNRegistered";
        }>>;
    };
    eAgentDNRegisterFailure: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        agentId: string;
        trackingId: string;
        reasonCode: number;
        orgId: string;
        reason: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                agentId: string;
                trackingId: string;
                reasonCode: number;
                orgId: string;
                reason: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            agentId: string;
            trackingId: string;
            reasonCode: number;
            orgId: string;
            reason: string;
        }>>;
    };
    eAgentMultiLogin: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        agentId: string;
        reason: string;
        type: "AgentMultiLoginCloseSession";
        agentSessionId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                agentId: string;
                reason: string;
                type: "AgentMultiLoginCloseSession";
                agentSessionId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            agentId: string;
            reason: string;
            type: "AgentMultiLoginCloseSession";
            agentSessionId: string;
        }>>;
    };
    eAgentReloginSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        dn: string;
        orgId: string;
        interactionIds: string[];
        status: "LoggedIn";
        subStatus: "Idle";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        lastStateChangeReason?: string | undefined;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentReloginSuccess";
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                eventType: "AgentDesktopMessage";
                agentId: string;
                trackingId: string;
                auxCodeId: string;
                teamId: string;
                agentSessionId: string;
                dn: string;
                orgId: string;
                interactionIds: string[];
                status: "LoggedIn";
                subStatus: "Idle";
                siteId: string;
                lastIdleCodeChangeTimestamp: number;
                lastStateChangeTimestamp: number;
                lastStateChangeReason?: string | undefined;
                profileType: string;
                channelsMap: Record<string, string[]>;
                type: "AgentReloginSuccess";
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            teamId: string;
            agentSessionId: string;
            dn: string;
            orgId: string;
            interactionIds: string[];
            status: "LoggedIn";
            subStatus: "Idle";
            siteId: string;
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            lastStateChangeReason?: string | undefined;
            profileType: string;
            channelsMap: Record<string, string[]>;
            type: "AgentReloginSuccess";
        }>>;
    };
    eAgentStationLoginSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        teamId: string;
        agentSessionId: string;
        orgId: string;
        interactionIds: string[];
        status: string;
        subStatus: "Idle" | "Available";
        siteId: string;
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        profileType: string;
        channelsMap: Record<string, string[]>;
        type: "AgentStationLoginSuccess";
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                eventType: "AgentDesktopMessage";
                agentId: string;
                trackingId: string;
                auxCodeId: string;
                teamId: string;
                agentSessionId: string;
                orgId: string;
                interactionIds: string[];
                status: string;
                subStatus: "Idle" | "Available";
                siteId: string;
                lastIdleCodeChangeTimestamp: number;
                lastStateChangeTimestamp: number;
                profileType: string;
                channelsMap: Record<string, string[]>;
                type: "AgentStationLoginSuccess";
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            teamId: string;
            agentSessionId: string;
            orgId: string;
            interactionIds: string[];
            status: string;
            subStatus: "Idle" | "Available";
            siteId: string;
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            profileType: string;
            channelsMap: Record<string, string[]>;
            type: "AgentStationLoginSuccess";
        }>>;
    };
    eAgentStateChangeSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        auxCodeId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: "Idle" | "Available";
        lastIdleCodeChangeTimestamp: number;
        lastStateChangeTimestamp: number;
        type: "AgentStateChangeSuccess";
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                eventType: "AgentDesktopMessage";
                agentId: string;
                trackingId: string;
                auxCodeId: string;
                agentSessionId: string;
                orgId: string;
                status: string;
                subStatus: "Idle" | "Available";
                lastIdleCodeChangeTimestamp: number;
                lastStateChangeTimestamp: number;
                type: "AgentStateChangeSuccess";
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: "Idle" | "Available";
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            type: "AgentStateChangeSuccess";
        }>>;
    };
    eAgentLogoutSuccess: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        eventType: "AgentDesktopMessage";
        agentId: string;
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        status: string;
        subStatus: string;
        loggedOutBy?: string | undefined;
        type: "AgentLogoutSuccess";
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                eventType: "AgentDesktopMessage";
                agentId: string;
                trackingId: string;
                agentSessionId: string;
                orgId: string;
                status: string;
                subStatus: string;
                loggedOutBy?: string | undefined;
                type: "AgentLogoutSuccess";
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: string;
            loggedOutBy?: string | undefined;
            type: "AgentLogoutSuccess";
        }>>;
    };
};
declare type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.agent": {
                "Service.aqm.agent.stationLogin": ErrDetails;
            } | {
                "Service.aqm.agent.stationLoginFailed": Failure;
            } | {
                "Service.aqm.agent.stateChange": Failure;
            } | {
                "Service.aqm.agent.reload": Failure;
            } | {
                "Service.aqm.agent.logout": Failure;
            } | {
                "Service.aqm.agent.mockOutdialAniList": Failure;
            } | {
                "Service.reqs.generic.failure": {
                    trackingId: string;
                };
            } | "Service.aqm.agent.fetchAddressBooks";
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Agent {
        type LogoutSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: string;
            loggedOutBy?: string;
            type: "AgentLogoutSuccess";
        }>;
        type ReloginSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            teamId: string;
            agentSessionId: string;
            dn: string;
            orgId: string;
            interactionIds: string[];
            status: "LoggedIn";
            subStatus: "Idle";
            siteId: string;
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            lastStateChangeReason?: string;
            profileType: string;
            channelsMap: Record<string, string[]>;
            type: "AgentReloginSuccess";
        }>;
        type StateChangeSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            agentSessionId: string;
            orgId: string;
            status: string;
            subStatus: "Available" | "Idle";
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            type: "AgentStateChangeSuccess";
        }>;
        type StationLoginSuccess = Msg<{
            eventType: "AgentDesktopMessage";
            agentId: string;
            trackingId: string;
            auxCodeId: string;
            teamId: string;
            agentSessionId: string;
            orgId: string;
            interactionIds: string[];
            status: string;
            subStatus: "Available" | "Idle";
            siteId: string;
            lastIdleCodeChangeTimestamp: number;
            lastStateChangeTimestamp: number;
            profileType: string;
            channelsMap: Record<string, string[]>;
            type: "AgentStationLoginSuccess";
        }>;
        type DNRegistered = Msg<{
            eventType: "RoutingMessage";
            agentId: string;
            trackingId: string;
            dn: string;
            orgId: string;
            type: "AgentDNRegistered";
        }>;
        type OutdialAniListSuccess = Msg<{
            data: Record<string, any>;
        }>;
        type OutdialAni = {
            id: string;
            name: string;
        };
        type Logout = {
            logoutReason: "User requested logout";
        };
        type StateChange = {
            state: "Available" | "Idle" | "RONA" | string;
            auxCodeIdArray: string;
        };
        type StationLogin = {
            dn: string;
            teamId: string;
            teamName: string;
            siteId: string;
            usesOtherDN: boolean;
            skillProfileId?: string;
            auxCodeId: string;
            isExtension?: boolean;
        };
        type AddressBooks = {
            speedDials: Address[];
        };
        type Address = {
            desc: string;
            dn: string;
            phoneBookName?: string;
        };
    }
}
export {};
//# sourceMappingURL=aqm-service-agent.d.ts.map
import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { HttpReqs } from "../../core/http-reqs";
import { Service } from "../../index";
import Contact = Service.Aqm.Contact;
import Failure = Service.Aqm.Global.Failure;
declare type MEDIA_CHANNEL = "email" | "chat" | "telephony" | "social" | "sms" | "facebook" | string;
/**
 * aqmContact
 * @param reqs
 * @category AQM Service
 */
export declare function aqmContact(aqm: AqmReqs, http: HttpReqs): {
    /**
     * Accept incoming contact
     */
    accept: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Consult Accept contact
     */
    consultAccept: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Get list of Agents
     */
    buddyAgents: (p: {
        data: Contact.BuddyAgents;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        eventType: string;
        agentId: string;
        /** Optional id  for tracking purpose */
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        /** Current state of agents for eg: Available | Idle */
        type: string;
        agentList: Contact.BuddyDetails[];
    }>>) => void) | undefined) => Promise<Msg<{
        eventType: string;
        agentId: string;
        /** Optional id  for tracking purpose */
        trackingId: string;
        agentSessionId: string;
        orgId: string;
        /** Current state of agents for eg: Available | Idle */
        type: string;
        agentList: Contact.BuddyDetails[];
    }>>;
    /**
     * End contact
     */
    end: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Consult End contact
     */
    consultEnd: (p: {
        interactionId: string;
        isConsult: boolean;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Cancel Ctq request
     */
    cancelCtq: (p: {
        interactionId: string;
        data: Contact.cancelCtq;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Wrapup contact
     */
    wrapup: (p: {
        interactionId: string;
        data: Contact.WrapupPayLoad;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * VteamTransfer contact
     */
    vteamTransfer: (p: {
        interactionId: string;
        data: Contact.vteamTransferPayLoad;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * BlindTransfer contact
     */
    blindTransfer: (p: {
        interactionId: string;
        data: Contact.blindTransferPayLoad;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Hold contact
     */
    hold: (p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Unhold contact
     */
    unHold: (p: {
        interactionId: string;
        data: {
            mediaResourceId: string;
        };
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Consult contact
     */
    consult: (p: {
        interactionId: string;
        data: Contact.ConsultPayload | Contact.ConsultDN | Contact.ConsultAgent | Contact.ConsultQueue;
        url: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Consult Conference contact
     */
    consultConference: (p: {
        interactionId: string;
        data: Contact.ConsultPayload | Contact.ConsultDN;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Decline contact
     */
    decline: (p: {
        interactionId: string;
        data: Contact.declinePayload;
        isConsult: boolean;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Consult/Conference Transfer contact
     */
    consultTransfer: (p: {
        interactionId: string;
        data: Contact.consultTransferPayLoad;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Get contact history by ani
     */
    fetchHistoryByANI: (p: {
        ani: string;
        startTime: number;
        endTime: number;
    }, cb?: ((res: import("axios").AxiosResponse<Contact.HistoryByANI>) => void) | undefined) => Promise<Contact.HistoryByANI>;
    /**
     * Get contact history by agent
     */
    fetchHistoryByAgent: (p: {
        startTime: number;
        endTime: number;
    }, cb?: ((res: import("axios").AxiosResponse<Contact.HistoryByAgent>) => void) | undefined) => Promise<Contact.HistoryByAgent>;
    /**
     * Get (inbound/outbound) transcripts for selected contact
     */
    fetchTranscript: (p: {
        transcriptId: string;
    }, cb?: ((res: import("axios").AxiosResponse<string>) => void) | undefined) => Promise<string>;
    /**
     * Get list of queues available.
     */
    vteamList: (p: {
        data: Contact.VTeam;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        data: {
            vteamList: Contact.VteamDetails[];
            allowConsultToQueue: boolean;
        };
        jsMethod: string;
        callData: string;
        agentSessionId: string;
    }>>) => void) | undefined) => Promise<Msg<{
        data: {
            vteamList: Contact.VteamDetails[];
            allowConsultToQueue: boolean;
        };
        jsMethod: string;
        callData: string;
        agentSessionId: string;
    }>>;
    /**
     * Pause Recording
     */
    pauseRecording: (p: {
        interactionId: string;
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * Resume Recording
     */
    resumeRecording: (p: {
        interactionId: string;
        data: {
            autoResumed: boolean;
        };
    }, cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    eAgentContact: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactAssigned: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactAssignFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactWrappedUp: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentOfferContact: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentOfferContactRona: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentOfferConsult: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentWrapup: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eResumeRecording: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    ePauseRecording: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eConsultTransfer: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentblindTransferred: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentvteamTransfer: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eCallRecordingStarted: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentContactUnHeld: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultCreated: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultConferenced: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentCtqCancelled: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultConferenceEnded: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsulting: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultEndFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentCtqFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentCtqCancelFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eAgentConsultConferenceEndFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.contact": {
                "Service.aqm.contact.accept": Failure;
            } | {
                "Service.aqm.contact.end": Failure;
            } | {
                "Service.aqm.contact.wrapup": Failure;
            } | {
                "Service.aqm.contact.AgentVteamTransferFailed": Failure;
            } | {
                "Service.aqm.contact.AgentBlindTransferFailedEvent": Failure;
            } | {
                "Service.aqm.contact.AgentConsultTransferFailed": Failure;
            } | {
                "Service.aqm.contact.consult": Failure;
            } | {
                "Service.aqm.err.trackingId": {
                    trackingId: string;
                };
            } | {
                "Service.aqm.contact.consultAccept": Failure;
            } | {
                "Service.aqm.contact.consultConference": Failure;
            } | {
                "Service.aqm.contact.consultEnd": Failure;
            } | {
                "Service.aqm.contact.cancelCtq": Failure;
            } | {
                "Service.aqm.contact.hold": Failure;
            } | {
                "Service.aqm.contact.unHold": Failure;
            } | "Service.aqm.contact.fetchTranscript" | "Service.aqm.contact.fetchHistoryByANI" | "Service.aqm.contact.fetchHistoryByAgent" | {
                "Service.aqm.contact.BuddyAgentsRetrieveFailed": Failure;
            } | {
                "Service.aqm.contact.VteamListFailed": Failure;
            } | {
                "Service.aqm.contact.pauseRecording": Failure;
            } | {
                "Service.aqm.contact.resumeRecording": Failure;
            } | {
                "Service.reqs.generic.failure": {
                    trackingId: string;
                };
            };
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Contact {
        type HistoryByANI = {
            contacts: Contact[];
        };
        type HistoryByAgent = {
            contacts: Contact[];
        };
        type AgentContact = Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number;
            isConsulted?: boolean;
            isConferencing: boolean;
            updatedBy?: string;
            destinationType?: string;
        }>;
        type Contact = {
            /** Contact start time in timestamp */
            cstts: string;
            /** Contact end time in timestamp */
            cetts: string;
            /** talk duration in timestamp */
            talkDuration: number;
            agentName: string;
            /** entry point of the contact */
            entrypointName: string;
            /** Channel type pof the contact e.g. email|chat|telephony */
            channelType: string;
            /** ani of the customer */
            ani: string;
            sid: string;
            /** transcript id */
            transcript: string;
            /** outbound transcript id */
            outboundTranscript: string;
            terminationType: string;
            /** Contact Subject */
            subject: string;
            customerName: string;
            dnis: string;
            callDirection: string;
            subChannelType?: string;
            wrapUpCode: string;
        };
        type BuddyDetails = {
            agentId: string;
            /** state of agent eg : Available | Idle */
            state: string;
            teamId: string;
            dn: string;
            agentName: string;
            /** Unique id of site to which agent belongs */
            siteId: string;
        };
        type BuddyAgents = {
            agentProfileId: string;
            /** Channel type of the contact e.g. email|chat|telephony */
            channelName: string;
            /** Filter for agent state eg : Available | Idle  */
            state?: string;
            /** Optional id  for tracking purpose */
            trackingId?: string;
        };
        type BuddyAgentsSuccess = Msg<{
            eventType: string;
            agentId: string;
            /** Optional id  for tracking purpose */
            trackingId: string;
            agentSessionId: string;
            orgId: string;
            /** Current state of agents for eg: Available | Idle */
            type: string;
            agentList: Array<BuddyDetails>;
        }>;
        type VTeam = {
            agentProfileId: string;
            agentSessionId: string;
            channelType: string;
            type: string;
            trackingId?: string;
        };
        type VteamDetails = {
            name: string;
            channelType: string;
            id: string;
            analyzerId: string;
            type: string;
        };
        type VTeamSuccess = Msg<{
            data: {
                vteamList: Array<VteamDetails>;
                allowConsultToQueue: boolean;
            };
            jsMethod: string;
            callData: string;
            agentSessionId: string;
        }>;
        type Interaction = {
            isFcManaged: boolean;
            isTerminated: boolean;
            mediaType: MEDIA_CHANNEL;
            previousVTeams: string[];
            state: string;
            currentVTeam: string;
            participants: any;
            interactionId: string;
            orgId: string;
            callProcessingDetails: {
                QMgrName: string;
                taskToBeSelfServiced: string;
                ani: string;
                dnis: string;
                tenantId: string;
                QueueId: string;
                vteamId: string;
                pauseResumeEnabled?: string;
                pauseDuration?: string;
                isPaused?: string;
                recordInProgress?: string;
                ctqInProgress?: string;
                outdialTransferToQueueEnabled?: string;
                convIvrTranscript?: string;
                customerName: string;
                virtualTeamName: string;
                ronaTimeout: string;
                category: string;
                reason: string;
                sourceNumber: string;
                sourcePage: string;
                appUser: string;
                customerNumber: string;
                reasonCode: string;
                IvrPath: string;
                pathId: string;
                fromAddress: string;
            };
            media: Record<string, {
                mediaResourceId: string;
                mediaType: MEDIA_CHANNEL;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: number | null;
            }>;
            owner: string;
            mediaChannel: MEDIA_CHANNEL;
            contactDirection: {
                type: string;
            };
            outboundType?: string;
            callFlowParams: Record<string, {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            }>;
            callAssociatedData?: Record<string, callAssociatedData>;
        };
        type WrapupPayLoad = {
            wrapUpReason: string;
            auxCodeId: string;
            isAutoWrapup: string;
        };
        type ConsultPayload = {
            agentId: string;
            destAgentId: string | undefined;
            mediaType?: string;
        };
        type ConsultAgent = {
            agentId: string;
            destAgentId: string;
            destAgentDN?: string;
            destAgentTeamId?: string;
            destSiteId?: string;
            mediaType: string;
            trackingId: string;
        };
        type ConsultQueue = {
            agentId: string;
            queueId: string;
            trackingId: string;
        };
        type ConsultDN = {
            destAgentId: string;
            destinationType: string;
            mediaType: string;
            trackingId?: string;
        };
        type vteamTransferPayLoad = {
            vteamId: string;
            vteamType: string;
        };
        type blindTransferPayLoad = {
            agentId: string;
            destAgentId: string;
            mediaType: MEDIA_CHANNEL;
            destAgentTeamId: string;
            destAgentDN: string;
            destSiteId: string;
        };
        type cancelCtq = {
            agentId: string;
            queueId: string;
        };
        type consultTransferPayLoad = {
            agentId?: string;
            destAgentId: string;
            mediaType: MEDIA_CHANNEL;
            mediaResourceId: string;
            destinationType?: string;
        };
        type declinePayload = {
            mediaResourceId: string;
        };
        type callAssociatedData = {
            displayName: string;
            name: string;
            agentEditable: boolean;
            value: string;
            type: string;
        };
        type warnOnNavigation = {
            [key: string]: boolean;
        };
    }
}
export {};
//# sourceMappingURL=aqm-service-contact.d.ts.map
import { AqmReqs, Msg } from "../../core/aqm-reqs";
import { Service } from "../../index";
import Configs = Service.Aqm.Configs;
/**
 * aqmConfigs
 * @param reqs
 * @category AQM Service
 */
export declare function aqmConfigs(aqm: AqmReqs): {
    application: (cbRes?: ((res: import("axios").AxiosResponse<Msg<{
        data: {
            "std.teamIdsCSV": string;
            protocolVersion: string;
            "std.siteName": string;
            "std.enterpriseId": string;
            "std.status": string;
            "std.defaultDn": string;
            "std.userRealName": string;
            "std.teamNamesCSV": string;
            "std.agentName": string;
            skillProfileId: string;
            agentProfileIDsCSV: string;
            attribute: {
                name: string;
                value: string;
            }[];
            "std.agentId": string;
            "std.siteId": string;
            "std.subStatus": string;
            lostConnectionRecoveryTimeout: string;
            cadVariables: Configs.CadVariables[];
            callVariablesSuppressed: Configs.CallVariablesSuppressed;
        };
        jsMethod: "agentPropertyChanged";
        callData: string;
        agentSessionId: string;
    }>>) => void) | undefined) => Promise<Msg<{
        data: {
            "std.teamIdsCSV": string;
            protocolVersion: string;
            "std.siteName": string;
            "std.enterpriseId": string;
            "std.status": string;
            "std.defaultDn": string;
            "std.userRealName": string;
            "std.teamNamesCSV": string;
            "std.agentName": string;
            skillProfileId: string;
            agentProfileIDsCSV: string;
            attribute: {
                name: string;
                value: string;
            }[];
            "std.agentId": string;
            "std.siteId": string;
            "std.subStatus": string;
            lostConnectionRecoveryTimeout: string;
            cadVariables: Configs.CadVariables[];
            callVariablesSuppressed: Configs.CallVariablesSuppressed;
        };
        jsMethod: "agentPropertyChanged";
        callData: string;
        agentSessionId: string;
    }>>;
    eUpdateAgentProfile: import("@uuip/unified-ui-platform-sdk").Signal.WithData<Msg<{
        data: {
            "agent-profile": {
                xmlns: string;
                entityList: {
                    type: string;
                    entity: Configs.Entity[];
                }[];
                dialPlan: Configs.DialPlan;
                outDialEp: string;
                "profile-attribute": {
                    name: string;
                    value: string;
                }[];
                wrapUpData: Configs.WrapupData;
            };
        };
        jsMethod: "updateAgentProfile";
        agentSessionId: string;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: Msg<{
                data: {
                    "agent-profile": {
                        xmlns: string;
                        entityList: {
                            type: string;
                            entity: Configs.Entity[];
                        }[];
                        dialPlan: Configs.DialPlan;
                        outDialEp: string;
                        "profile-attribute": {
                            name: string;
                            value: string;
                        }[];
                        wrapUpData: Configs.WrapupData;
                    };
                };
                jsMethod: "updateAgentProfile";
                agentSessionId: string;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<Msg<{
            data: {
                "agent-profile": {
                    xmlns: string;
                    entityList: {
                        type: string;
                        entity: Configs.Entity[];
                    }[];
                    dialPlan: Configs.DialPlan;
                    outDialEp: string;
                    "profile-attribute": {
                        name: string;
                        value: string;
                    }[];
                    wrapUpData: Configs.WrapupData;
                };
            };
            jsMethod: "updateAgentProfile";
            agentSessionId: string;
        }>>;
    };
};
declare type ErrDetails = {
    status: number;
    type: string;
    trackingId: string;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.configs": {
                "Service.aqm.configs.application": ErrDetails;
                "Service.aqm.configs.teams": ErrDetails;
            };
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Configs {
        type WrapupData = {
            wrapUpProps: {
                autoWrapup: boolean | undefined;
                autoWrapupInterval: number | undefined;
                lastAgentRoute: boolean | undefined;
                wrapUpReasonList: Array<WrapUpReason>;
                interactionId: string;
            };
        };
        type AgentPropertyChanged = Msg<{
            data: {
                "std.teamIdsCSV": string;
                protocolVersion: string;
                "std.siteName": string;
                "std.enterpriseId": string;
                "std.status": string;
                "std.defaultDn": string;
                "std.userRealName": string;
                "std.teamNamesCSV": string;
                "std.agentName": string;
                skillProfileId: string;
                agentProfileIDsCSV: string;
                attribute: {
                    name: string;
                    value: string;
                }[];
                "std.agentId": string;
                "std.siteId": string;
                "std.subStatus": string;
                lostConnectionRecoveryTimeout: string;
                cadVariables: Configs.CadVariables[];
                callVariablesSuppressed: Configs.CallVariablesSuppressed;
            };
            jsMethod: "agentPropertyChanged";
            callData: string;
            agentSessionId: string;
        }>;
        type UpdateAgentProfile = Msg<{
            data: {
                "agent-profile": {
                    xmlns: string;
                    entityList: {
                        type: string;
                        entity: Entity[];
                    }[];
                    dialPlan: DialPlan;
                    outDialEp: string;
                    "profile-attribute": {
                        name: string;
                        value: string;
                    }[];
                    wrapUpData: Configs.WrapupData;
                };
            };
            jsMethod: "updateAgentProfile";
            agentSessionId: string;
        }>;
        type WrapUpReason = {
            isSystem: boolean;
            name: string;
            id: number;
            isDefault: boolean;
        };
        type CadVariables = {
            name: string;
            status: number;
            agentEditable: boolean;
        };
        type CallVariablesSuppressed = string[];
        type Entity = {
            isSystem: boolean;
            name: string;
            id: number;
            isDefault: boolean;
        };
        type DialPlan = {
            type: "adhocDial";
            dialPlanEntity: {
                regex: string;
                prefix: string;
                strippedChars: string;
                name: string;
            }[];
        };
    }
}
export {};
//# sourceMappingURL=aqm-service-configs.d.ts.map
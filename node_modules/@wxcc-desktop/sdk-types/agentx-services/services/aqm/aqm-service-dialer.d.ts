import { AqmReqs } from "../../core/aqm-reqs";
import { Service } from "../../index";
import Contact = Service.Aqm.Contact;
import Failure = Service.Aqm.Global.Failure;
export declare function aqmDialer(aqm: AqmReqs): {
    startOutdial: (p: {
        data: Service.Aqm.Dialer.tasks;
    }, cbRes?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    /**
     * CAD Variable Update
     */
    updateCadVariables: (p: {
        interactionId: string;
        data: Service.Aqm.Dialer.updateCadPayLoad;
    }, cbRes?: ((res: import("axios").AxiosResponse<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>) => void) | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>>;
    eOutdialFailed: import("@uuip/unified-ui-platform-sdk").Signal.WithData<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: import("../../core/aqm-reqs").Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
    eContactUpdated: import("@uuip/unified-ui-platform-sdk").Signal.WithData<import("../../core/aqm-reqs").Msg<{
        mediaResourceId: string;
        eventType: string;
        agentId: string;
        destAgentId: string;
        trackingId: string;
        consultMediaResourceId: string;
        interaction: Contact.Interaction;
        interactionId: string;
        orgId: string;
        owner: string;
        queueMgr: string;
        type: string;
        ronaTimeout?: number | undefined;
        isConsulted?: boolean | undefined;
        isConferencing: boolean;
        updatedBy?: string | undefined;
        destinationType?: string | undefined;
    }>> & {
        listenOnceAsync: (p?: {
            resolveIf?: ((msg: import("../../core/aqm-reqs").Msg<{
                mediaResourceId: string;
                eventType: string;
                agentId: string;
                destAgentId: string;
                trackingId: string;
                consultMediaResourceId: string;
                interaction: Contact.Interaction;
                interactionId: string;
                orgId: string;
                owner: string;
                queueMgr: string;
                type: string;
                ronaTimeout?: number | undefined;
                isConsulted?: boolean | undefined;
                isConferencing: boolean;
                updatedBy?: string | undefined;
                destinationType?: string | undefined;
            }>) => boolean) | undefined;
            timeout?: number | "disabled" | undefined;
        } | undefined) => Promise<import("../../core/aqm-reqs").Msg<{
            mediaResourceId: string;
            eventType: string;
            agentId: string;
            destAgentId: string;
            trackingId: string;
            consultMediaResourceId: string;
            interaction: Contact.Interaction;
            interactionId: string;
            orgId: string;
            owner: string;
            queueMgr: string;
            type: string;
            ronaTimeout?: number | undefined;
            isConsulted?: boolean | undefined;
            isConferencing: boolean;
            updatedBy?: string | undefined;
            destinationType?: string | undefined;
        }>>;
    };
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.aqm.dialer": {
                "Service.aqm.dialer.startOutdial": Failure;
            } | {
                "Service.aqm.dialer.ContactUpdateFailed": Failure;
            } | {
                "Service.reqs.generic.failure": {
                    trackingId: string;
                };
            };
        }
    }
}
declare module "../../index" {
    namespace Service.Aqm.Dialer {
        type tasks = {
            id?: string;
            entryPointId: string;
            destination: string;
            direction: string;
            origin?: string;
            attributes: {
                [key: string]: string;
            };
            mediaType: string;
            outboundType: string;
        };
        type updateCadPayLoad = {
            attributes: {
                [key: string]: string;
            };
        };
    }
}
//# sourceMappingURL=aqm-service-dialer.d.ts.map
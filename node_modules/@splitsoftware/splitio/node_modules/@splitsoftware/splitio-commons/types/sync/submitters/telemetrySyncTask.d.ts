import { ISyncTask, ITimeTracker } from '../types';
import { ISplitApi } from '../../services/types';
import { IStorageSync, TelemetryCacheSync } from '../../storages/types';
import { TelemetryUsageStatsPayload, TelemetryConfigStatsPayload } from './types';
import { IReadinessManager } from '../../readiness/types';
import { ISettings } from '../../types';
/**
 * Converts `impressions` data from cache into request payload.
 */
export declare function telemetryCacheStatsAdapter({ splits, segments, telemetry }: IStorageSync & {
    telemetry: TelemetryCacheSync;
}): {
    isEmpty(): boolean;
    clear(): void;
    state(): TelemetryUsageStatsPayload;
};
export declare function telemetryCacheConfigAdapter(settings: ISettings, telemetryCache: TelemetryCacheSync): {
    isEmpty(): boolean;
    clear(): void;
    state(): TelemetryConfigStatsPayload;
};
/**
 * Sync task that periodically posts impressions data
 */
export declare function telemetrySyncTaskFactory(settings: ISettings, { postMetricsUsage, postMetricsConfig }: ISplitApi, storage: IStorageSync & {
    telemetry: TelemetryCacheSync;
}, telemetryRefreshRate: number, readiness: IReadinessManager, latencyTracker?: ITimeTracker): ISyncTask;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var path = require('path');

var fs = require('fs-extra');

var generateComment = function generateComment(dataFile) {
  return ['//------------------------------------------------------', '// Do not edit this file directly. These variables are', '// generated from the Momentum Design color tokens.', "// " + dataFile, '//------------------------------------------------------'].join('\n');
};

var delve = function delve(value, prefix) {
  if (typeof value !== 'object') {
    return prefix + ": " + value + " !default;\n";
  }

  return Object.keys(value).map(function (key) {
    return delve(value[key], prefix + "-" + key);
  }).join('');
};

function generateFileFromThemeToken(_x, _x2, _x3, _x4) {
  return _generateFileFromThemeToken.apply(this, arguments);
}

function _generateFileFromThemeToken() {
  _generateFileFromThemeToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dest, fileName, data, dataFile) {
    var scope, prefix, outputFile, content;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            scope = _objectSpread({}, data);
            prefix = "$" + data.prefix + "-" + data.component;
            outputFile = path.join(dest, fileName);
            delete scope.component;
            delete scope.prefix;
            content = [generateComment(dataFile), '\n\n', delve(scope, prefix)].join('');
            _context.next = 8;
            return fs.outputFile(outputFile, content);

          case 8:
            console.warn(outputFile + " written!");

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateFileFromThemeToken.apply(this, arguments);
}

module.exports = generateFileFromThemeToken;
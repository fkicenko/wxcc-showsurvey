import "@/components/input/Input";
import "@/components/menu-overlay/MenuOverlay";
import { LitElement, PropertyValues } from "lit-element";
import { DateTime } from "luxon";
import { DatePicker } from "../datepicker/DatePicker";
import { TimePicker } from "../timepicker/TimePicker";
export declare namespace DateTimePicker {
    const weekStartDays: string[];
    class ELEMENT extends LitElement {
        maxDate: string | undefined;
        minDate: string | undefined;
        weekStart: typeof weekStartDays[number];
        twoDigitAutoTab: boolean;
        twentyFourHourFormat: boolean;
        timeSpecificity: TimePicker.TimeSpecificity;
        dateValue: string | undefined;
        timeValue: string;
        value: string | undefined;
        locale: string;
        disabled: boolean;
        fullDateTime: DateTime | undefined;
        selectedTimeObject: DateTime | undefined;
        selectedDateObject: DateTime;
        firstCycle: boolean;
        datePicker: DatePicker.ELEMENT;
        timePicker: TimePicker.ELEMENT;
        protected firstUpdated(changedProperties: PropertyValues): Promise<void>;
        protected updated(changedProperties: PropertyValues): void;
        handleDateChange: (event: any) => void;
        handleTimeChange: (event: any) => void;
        handleDateTimeInputChange: (event: CustomEvent) => void;
        parseValueForVisuals: (value: string) => void;
        updateDateTimeObject: () => void;
        combineDateAndTimeValues: (dateString: string | undefined, timeString: string) => void;
        static get styles(): import("lit-element").CSSResult[];
        render(): import("lit-element").TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-date-time-picker": DateTimePicker.ELEMENT;
    }
}

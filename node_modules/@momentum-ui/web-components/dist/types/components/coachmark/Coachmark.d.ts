/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
import "@/components/button/Button";
export declare const coachmarkPlacement: string[];
export declare namespace Coachmark {
    export type Place = typeof coachmarkPlacement[number];
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusTrapMixin").AnyConstructor<import("../../mixins/FocusTrapMixin").FocusTrapClass & import("../../mixins/FocusTrapMixin").FocusTrapInterface & import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        message: string;
        actionname: string;
        hidebutton: boolean;
        placement: Place;
        show: boolean;
        color: string;
        popper: HTMLDivElement;
        reference: HTMLDivElement;
        private slotContent;
        connectedCallback(): void;
        notifyCoachCreate(): void;
        coachAction(): void;
        handleSlotChange(event: Event): void;
        protected update(changedProperties: PropertyValues): void;
        get coachWrapClassMap(): {
            "md-coachmark--active": boolean;
        };
        get coachClassMap(): {
            [x: string]: boolean;
        };
        static get styles(): import("lit-element").CSSResult[];
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-coachmark": Coachmark.ELEMENT;
    }
}

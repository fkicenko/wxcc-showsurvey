/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
export declare namespace ButtonGroup {
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass> & import("../../mixins/SlottedMixin").AnyConstructor<import("../../mixins/SlottedMixin").SlotableClass & import("../../mixins/SlottedMixin").SlotableInterface>;
    export class ELEMENT extends ELEMENT_base {
        active: number;
        tabIndex: number;
        buttonSlot?: HTMLSlotElement;
        private _disabled;
        get disabled(): boolean;
        set disabled(value: boolean);
        get slotElement(): HTMLSlotElement | undefined;
        static get styles(): import("lit-element").CSSResult[];
        protected firstUpdated(changedProperties: PropertyValues): void;
        private setButtonTabIndex;
        protected updated(changedProperties: PropertyValues): void;
        get selectedBtnValue(): string;
        private notifySelectedChange;
        private setSelected;
        private setFirstActive;
        private findBtnIndex;
        private findSelectedBtnIndex;
        private isBtnDisabled;
        connectedCallback(): void;
        disconnectedCallback(): void;
        private switchBtnOnArrowPress;
        private getAvailableSelectedIndex;
        private isFocusable;
        handleClick(event: MouseEvent): void;
        handleKeyDown(event: KeyboardEvent): void;
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-button-group": ButtonGroup.ELEMENT;
    }
}

export declare function debounce(ms?: number): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export declare function evt(): (protoOrDescriptor: any, name: string) => any;
declare type Detail<T> = {
    detail: T;
};
export declare class Evt<T extends Detail<V>, V = any> {
    private target;
    private eventName;
    constructor(target: HTMLElement, eventName: string);
    emit(value: T extends Detail<infer U> ? U : never, options?: {
        bubbles?: boolean;
        composed?: boolean;
        cancelable?: boolean;
    }): void;
}
import { Part } from "lit-html";
export declare type TemplateInfo = {
    content: string;
    insertIndex: number;
    col: number;
    row: number;
};
declare type TCallback = TemplateInfo & {
    fragment: DocumentFragment;
};
declare type TPayload = TemplateInfo & {
    template: HTMLTemplateElement;
    cb: TemplateCallback;
};
export declare type TemplateCallback = (p: TCallback) => void;
export declare const templateCallback: (p: TPayload) => (part: Part) => void;
export {};

import { LitElement, PropertyValues } from "lit-element";
import "@/components/button/Button";
import "@/components/icon/Icon";
import "@interactjs/auto-start";
import "@interactjs/actions/drag";
import "@interactjs/modifiers";
import "@interactjs/actions/resize";
import './FloatingMinimizedModal';
export declare namespace FloatingModal {
    const ELEMENT_base: typeof LitElement & import("../../mixins/SlottedMixin").AnyConstructor<import("../../mixins/SlottedMixin").SlotableClass & import("../../mixins/SlottedMixin").SlotableInterface> & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        heading: string;
        label: string;
        show: boolean;
        aspectRatio: boolean;
        fixed: boolean;
        full: boolean;
        closeAriaLabel: string;
        resizeAriaLabel: string;
        minimizeAriaLabel: string;
        private minimize;
        position: {
            x: number;
            y: number;
        } | undefined;
        minPosition: {
            x: number;
            y: number;
        } | undefined;
        minimizable: boolean;
        containerRect: DOMRect | null;
        private dragOccured;
        container?: HTMLDivElement;
        body: HTMLDivElement;
        header: HTMLDivElement;
        minimizedHeader: HTMLDivElement;
        headerSlot: HTMLSlotElement;
        private containerTransform;
        private applyInitialPosition;
        static get styles(): import("lit-element").CSSResult[];
        protected updated(changedProperties: PropertyValues): void;
        private isNewPositionNotSame;
        private setInitialTargetPosition;
        private cleanContainerStyles;
        private getContainerTransform;
        private setContainerRect;
        private setInteractInstance;
        handleClose(event: MouseEvent): void;
        handleMinimize(event: Event): void;
        handleToggleExpandCollapse(): void;
        private resizeMoveListener;
        private resizeEndListener;
        private getInitialPosition;
        private getTransformValues;
        private dragMoveListener;
        private dragEndListener;
        private setTargetPosition;
        private destroyInteractInstance;
        disconnectedCallback(): void;
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-floating-modal": FloatingModal.ELEMENT;
    }
}

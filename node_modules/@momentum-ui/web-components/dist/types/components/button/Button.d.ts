/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import "@/components/spinner/Spinner";
import { LitElement } from "lit-element";
export declare const buttonSize: readonly ["20", "28", "32", "36", "40", "44", "52", "56", "72", "68", "84", "size-none", 20, 28, 32, 36, 40, 44, 52, 56, 68, 72, 68, 84];
export declare const buttonTag: readonly ["button", "input", "a"];
export declare const buttonType: readonly ["button", "reset", "submit"];
export declare const buttonRoles: readonly ["button", "checkbox", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "switch", "tab"];
export declare const buttonVariant: readonly ["primary", "secondary", "red", "green", "white", "darkGrey"];
export declare const buttonColor: readonly ["blue", "red", "green", "orange", "yellow", "mint", "purple", "pink", "cyan", "white", "dark-gray", "duck-egg", "violet", "color-none", ""];
export declare namespace Button {
    type Tag = typeof buttonTag[number];
    type Type = typeof buttonType[number];
    type Role = typeof buttonRoles[number];
    type variant = typeof buttonVariant[number];
    type color = typeof buttonColor[number];
    type Attributes = {
        id?: string;
        disabled: boolean;
        alt?: string;
        href?: string;
        type: Type;
        ariaLabel?: string;
        ariaLabelledBy?: string;
        ariaExpanded?: boolean;
        ariaHaspopup?: boolean;
        ariaPressed?: boolean;
        ariaCurrent?: boolean;
        tag: Tag;
        loading: boolean;
        role?: string;
        value: string;
    };
    type Size = typeof buttonSize[number];
    class ELEMENT extends LitElement {
        _active: boolean;
        get active(): boolean;
        set active(value: boolean);
        private _tabIndex;
        get tabIndex(): number;
        set tabIndex(newValue: number);
        ariaLabel: string;
        ariaLabelledBy: string;
        ariaExpanded: boolean;
        ariaHaspopup: boolean;
        ariaPressed: boolean;
        circle: boolean;
        color: Button.color;
        containerLarge: boolean;
        disabled: boolean;
        href: string;
        id: string;
        value: string;
        keyboardKey: string;
        label: string;
        loading: boolean;
        outline: boolean;
        hasRemoveStyle: boolean;
        size: Button.Size;
        tag: Button.Tag;
        type: Button.Type;
        role: Button.Role;
        variant: Button.variant;
        width: string;
        maxWidth: string;
        activityType: string;
        iconActive: boolean;
        clickFunction: Function | null;
        button: HTMLButtonElement;
        renderWidth: () => {};
        renderMaxWidth: () => {};
        getStyles: () => import("lit-element").TemplateResult | undefined;
        handleKeyDown(event: KeyboardEvent): void;
        handleClick(event: MouseEvent): void;
        static get styles(): import("lit-element").CSSResult[];
        get buttonClassMap(): {
            [x: string]: boolean;
            "md-button--circle": boolean;
            "md-button--none": boolean;
            "md-button--outline": boolean;
            active: boolean;
            "md-activity": boolean;
            "md-button--icon": boolean;
            "md-button--onlyicon": boolean;
        };
        get slottedText(): string | null | undefined;
        get hasIcon(): boolean;
        iconTemplate: () => import("lit-element").TemplateResult;
        textTemplate: () => {};
        childrenTemplate(): import("lit-element").TemplateResult;
        buttonTemplate(tag: Button.Tag): {};
        render(): import("lit-element").TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-button": Button.ELEMENT;
    }
}

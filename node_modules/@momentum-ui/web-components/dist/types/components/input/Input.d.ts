/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement } from "lit-element";
import "@/components/help-text/HelpText";
import "@/components/icon/Icon";
import "@/components/label/Label";
import "@/components/spinner/Spinner";
export declare const containerSize: string[];
export declare const inputSize: string[];
export declare const inputType: string[];
export declare const inputShape: string[];
export declare const iconNames: string[];
export declare const iconPosition: string[];
export declare const nestedLevel: number[];
export declare const ariaInvalidType: string[];
export declare namespace Input {
    export type Type = "text" | "number" | "password" | "email" | "tel" | "checkbox";
    export type MessageType = "error" | "success" | "warning";
    export type Message = {
        type: MessageType;
        message: string;
    };
    export type ContainerSize = typeof containerSize[number];
    export type InputSize = typeof inputSize[number];
    export type InputType = typeof inputSize;
    export type shape = typeof inputShape;
    export type AriaInvalidType = typeof ariaInvalidType[number];
    export class MessageController {
        determineMessageType(array: Input.Message[]): MessageType;
        filterMessagesByType(array: Input.Message[], value: string): string[];
    }
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        ariaDescribedBy: string;
        ariaInvalid: Input.AriaInvalidType;
        ariaLabel: string;
        autofocus: boolean;
        auxiliaryContentPosition: "before" | "after" | null;
        clear: boolean;
        clearAriaLabel: string;
        compact: boolean;
        containerSize: Input.ContainerSize;
        disabled: boolean;
        id: string;
        inputSize: string;
        isFilled: boolean;
        isLoading: boolean;
        label: string;
        helpText: string;
        hideMessage: boolean;
        htmlId: string;
        messageArr: Input.Message[];
        min: number | undefined;
        max: number | undefined;
        maxLength: number | undefined;
        multi: boolean;
        multiline: boolean;
        name: string;
        nestedLevel: number;
        placeholder: string;
        readOnly: boolean;
        required: boolean;
        searchable: boolean;
        secondaryLabel: string;
        selectWhenInFocus: boolean;
        shape: string;
        type: Input.Type;
        value: string;
        input: HTMLInputElement;
        private isEditing;
        private readonly messageController;
        connectedCallback(): void;
        disconnectedCallback(): void;
        select(): void;
        handleOutsideClick(event: MouseEvent): void;
        handleKeyDown(event: KeyboardEvent): void;
        handleFocus(event: FocusEvent): void;
        handleMouseDown(event: MouseEvent): void;
        handleChange(event: Event): void;
        handleBlur(event: FocusEvent): void;
        handleClear(event: MouseEvent | KeyboardEvent): void;
        handleLabelClick(): void;
        get messageType(): Input.MessageType | null;
        get messages(): string[] | null;
        get inputClassMap(): {
            [x: string]: boolean;
            "md-input--filled": boolean;
            colums: boolean;
            "md-read-only": boolean;
            "md-disabled": boolean;
            "md-multi": boolean;
        };
        get inputWrapperClassMap(): {
            [x: string]: boolean;
            columns: boolean;
        };
        get inputTemplateClassMap(): {
            [x: string]: boolean;
            "md-input--multiline": boolean;
            "md-input--multi": boolean;
            "md-input--before": boolean;
            "md-input--after": boolean;
            "md-active": boolean;
            "md-focus": boolean;
            "md-read-only": boolean;
            "md-disabled": boolean;
            "md-dirty": boolean;
        };
        inputTemplate(): import("lit-element").TemplateResult;
        inputLeftTemplate(): {};
        inputRightTemplate(): import("lit-element").TemplateResult | undefined;
        secondaryLabelTemplate(): {};
        helpTextTemplate(): {};
        messagesTemplate(): {};
        labelTemplate(): {};
        static get styles(): import("lit-element").CSSResult[];
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-input": Input.ELEMENT;
    }
}

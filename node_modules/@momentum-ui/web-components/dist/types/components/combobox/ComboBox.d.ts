/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import "@/components/help-text/HelpText";
import "@/components/icon/Icon";
import { LitElement, PropertyValues } from "lit-element";
export declare namespace ComboBox {
    type OptionMember = {
        [key: string]: string;
    };
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        private _focusedIndex;
        label: string;
        options: (string | OptionMember)[];
        customOptions: never[];
        placeholder: string;
        isMulti: boolean;
        disabled: boolean;
        ordered: boolean;
        expanded: boolean;
        compact: boolean;
        noClearIcon: boolean;
        selectWhenInFocus: boolean;
        selectedOptions: (string | OptionMember)[];
        visibleOptions: number;
        optionId: string;
        optionValue: string;
        isCustomContent: boolean;
        searchable: boolean;
        shape: string;
        value: (string | OptionMember)[];
        inputValue: string;
        allowCustomValue: boolean;
        autofocus: boolean;
        resultsTextLocalization: string;
        optionsTextLocalization: string;
        trimSpace: boolean;
        invalid: boolean;
        invalidText: string;
        ariaLabel: string;
        clearAriaLabel: string;
        arrowAriaLabel: string;
        allTextLocalization: string;
        selectAllTextLocalization: string;
        selectedTextLocalization: string;
        allowSelectAll: boolean;
        showCustomError: boolean;
        showSelectedCount: boolean;
        private isSelectAllChecked;
        get focusedIndex(): number;
        set focusedIndex(index: number);
        private multiSelectedIndex;
        private multiSelected;
        private customContent;
        group?: HTMLDivElement;
        input?: HTMLInputElement;
        button?: HTMLButtonElement;
        listBox?: HTMLUListElement;
        lists?: HTMLLIElement[];
        selected?: HTMLDivElement[];
        protected firstUpdated(changedProperties: PropertyValues): void;
        protected updated(changedProperties: PropertyValues): void;
        protected handleFocusIn(event: Event): void;
        protected handleFocusOut(event: Event): void;
        private findFilteredOption;
        private setInitialValue;
        private isOptionObject;
        private setOptionCustomContent;
        private getOptionValue;
        private getOptionId;
        private getFocusedItem;
        private setupEvents;
        private teardownEvents;
        private setVisualListbox;
        private findSelectedOption;
        private findOptionIndex;
        private setSelectedOption;
        private notifySelectedChange;
        private filterOptions;
        private resizeListbox;
        private setInputValue;
        private updateOnNextFrame;
        private unCheckedAllOptions;
        private unCheckedOption;
        private checkAllOptions;
        private checkOption;
        private isSelectAllSelected;
        private setFocusOnHost;
        private isOptionFocused;
        private getAriaState;
        private scrollToOption;
        private getCustomContentName;
        private setInputSelectionRange;
        private isOptionChecked;
        private getInputSelection;
        private canMultiSelect;
        private removeMultiTag;
        private unselectedAllMultiTag;
        private findLastMultiSelected;
        private toggleMultiSelectedTag;
        private selectMultiTag;
        handleListClick(event: MouseEvent): Promise<void>;
        handleSelectAll(): Promise<void>;
        handleInputKeyUp(event: KeyboardEvent): void;
        private notifyInputValueChanged;
        handleInput(event: Event): void;
        private removeAllSelected;
        private removeSelected;
        private selectedChange;
        private shouldChangeButton;
        private setCustomValue;
        handleInputKeyDown(event: KeyboardEvent): void;
        toggleVisualListBox(): void;
        handleRemoveAll(event: MouseEvent): void;
        handleOutsideClick: (event: MouseEvent) => void;
        connectedCallback(): void;
        disconnectedCallback(): void;
        static get styles(): import("lit-element").CSSResult[];
        get listItemOptionMap(): {
            "md-combobox-multiselect": boolean;
        };
        get filteredOptions(): (string | OptionMember)[];
        get comboBoxTemplateClassMap(): {
            [x: string]: boolean;
            "md-combobox-searchable": boolean;
        };
        searchIconTemplate(): import("lit-element").TemplateResult;
        selectedOptionTemplate(selectedOption: string | OptionMember): import("lit-element").TemplateResult;
        clearButtonTemplate(): import("lit-element").TemplateResult;
        arrowButtonTemplate(): import("lit-element").TemplateResult;
        getSelectAllOption(): import("lit-element").TemplateResult;
        getSelctedCount(): {};
        getCustomErrorContent(): Element | null;
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-combobox": ComboBox.ELEMENT;
    }
}

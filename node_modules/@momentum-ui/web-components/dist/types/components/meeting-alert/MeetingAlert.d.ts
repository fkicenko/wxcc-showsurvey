/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, TemplateResult } from "lit-element";
import "@/components/avatar/Avatar";
import "@/components/button/Button";
import "@/components/icon/Icon";
export declare const MeetingAlertRole: readonly ["alert", "alertdialog", "button", "checkbox", "dialog", "link", "option", "status"];
export declare namespace MeetingAlert {
    type Role = typeof MeetingAlertRole[number];
    class ELEMENT extends LitElement {
        attendees: {
            title: string;
            src: null;
            alt: string;
        }[];
        closeAriaLabel: string;
        onKeyDown: MeetingAlert.ELEMENT["handleKeyDown"] | null;
        onSnooze: MeetingAlert.ELEMENT["handleSnooze"] | null;
        message: string;
        snoozeAriaLabel: string;
        role: Role;
        show: boolean;
        src: string;
        status: string;
        userStyles: string;
        title: string;
        _onSnooze: (e: Event) => void;
        _onClose: (e: Event) => void;
        handleSnooze: (e: Event) => void;
        handleClose: (e: Event) => void;
        handleKeyDown: (e: KeyboardEvent) => void;
        getStyles(): TemplateResult;
        static get styles(): import("lit-element").CSSResult[];
        render(): TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-meeting-alert": MeetingAlert.ELEMENT;
    }
}

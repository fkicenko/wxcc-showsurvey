/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import "@/components/icon/Icon";
import "@/components/menu-overlay/MenuOverlay";
import { LitElement, PropertyValues } from "lit-element";
import Sortable from "sortablejs";
import { MenuOverlay } from "../menu-overlay/MenuOverlay";
import { Tab, TabClickEvent } from "./Tab";
export declare const MORE_MENU_TAB_COPY_ID_PREFIX = "more-menu-copy-";
export declare namespace Tabs {
    const ELEMENT_base: typeof LitElement & import("../../mixins/SlottedMixin").AnyConstructor<import("../../mixins/SlottedMixin").SlotableClass & import("../../mixins/SlottedMixin").SlotableInterface> & import("../../mixins/RovingTabIndexMixin").AnyConstructor<import("../../mixins/RovingTabIndexMixin").RovingTabIndexInterface & import("../../mixins/SlottedMixin").SlotableInterface & import("../../mixins/SlottedMixin").SlotableClass & import("../../mixins/RovingTabIndexMixin").RovingTabIndexClass> & import("../../mixins/ResizeMixin").AnyConstructor<import("../../mixins/ResizeMixin").ResizeClass>;
    export class ELEMENT extends ELEMENT_base {
        justified: boolean;
        overlowLabel: string;
        draggable: boolean;
        direction: "horizontal" | "vertical";
        moreItemsScrollLimit: number;
        delay: number;
        animation: number;
        ghostClass: string;
        chosenClass: string;
        forceFallback: boolean;
        fallbackClass: string;
        tabsId: string;
        persistSelection: boolean;
        compUniqueId: string;
        private isMoreTabMenuVisible;
        private isMoreTabMenuMeasured;
        private isMoreTabMenuOpen;
        private isMoreTabMenuSelected;
        private isMoreTabMenuScrollable;
        private moreTabMenuOffsetWidth;
        private moreTabMenuMaxHeight;
        private tabsViewportDataList;
        private tabsFilteredAsVisibleList;
        private tabsFilteredAsHiddenList;
        private noTabsVisible;
        private defaultTabsOrderArray;
        private tabsOrderPrefsArray;
        tabSlotElement: HTMLSlotElement;
        panelSlotElement?: HTMLSlotElement;
        tabsListElement?: HTMLDivElement;
        tabsSettingsElement?: HTMLElement;
        moreTabMenuElement?: Tab.ELEMENT;
        menuOverlayElement?: MenuOverlay.ELEMENT;
        tabsMoreListElement?: HTMLDivElement;
        tabsCopyHiddenListElements?: NodeListOf<Tab.ELEMENT>;
        visibleTabsContainerElement?: HTMLElement;
        hiddenTabsContainerElement?: HTMLElement;
        private generateOptions;
        private tabs;
        private panels;
        private tabsCopy;
        private tabsHash;
        private tabsCopyHash;
        private tabsIdxHash;
        private tabsVisibleIdxHash;
        private tabsHiddenIdxHash;
        private tabHiddenIdPositiveTabIndex?;
        private visibleTabsSortableInstance;
        private hiddenTabsSortableInstance;
        private getCopyTabId;
        private getNormalizedTabId;
        static get styles(): import("lit-element").CSSResult[];
        private ensureTabsUpdateComplete;
        private measureTabsOffsetWidth;
        private measureHiddenTabsCopiesOffsetHeight;
        private manageOverflow;
        private updateIsMoreTabMenuSelected;
        private updateHiddenIdPositiveTabIndex;
        private sortTabsAndPanes;
        private linkPanelsAndTabs;
        get slotItem(): HTMLSlotElement;
        protected filterSlotted(): HTMLElement[];
        protected handleResize(contentRect: DOMRect): Promise<void>;
        private getDragDirection;
        handleOnDragEnd: (event: Sortable.SortableEvent) => Promise<void>;
        private makeTabCopyFocus;
        handleTabClick(event: CustomEvent<TabClickEvent>): void;
        handleNewSelectedTab(id: string): void;
        handleTabCrossClick(event: CustomEvent<TabClickEvent>): void;
        handleUpdatedSeletedTabAfterCross(crossTabIndex: number): void;
        private updateSelectedTab;
        private dispatchSelectedChangedEvent;
        private changeSelectedTabIdx;
        storeSelectedTabIndex(index: number): void;
        handleOverlayClose(): void;
        dispatchKeydownEvent(event: KeyboardEvent, tabId: string): void;
        handleTabKeydown(event: any): void;
        private setupTabsEvents;
        private teardownTabsEvents;
        private clearTabOrderPrefs;
        private setupPanelsAndTabs;
        private setupMoreTab;
        private initializeSortable;
        private initializeTabs;
        connectedCallback(): void;
        private selectTabFromStorage;
        disconnectedCallback(): void;
        protected firstUpdated(changedProperties: PropertyValues): void;
        protected updated(changedProperties: PropertyValues): void;
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-tabs": Tabs.ELEMENT;
    }
}

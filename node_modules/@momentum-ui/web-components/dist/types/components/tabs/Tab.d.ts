/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
export declare const TAB_CROSS_WIDTH = 22;
export declare type TabClickEvent = {
    id: string;
};
export declare type TabCloseClickEvent = {
    id: string;
    name: string;
};
export declare type TabKeyDownEvent = {
    id: string;
    key: string;
    ctrlKey: boolean;
    shiftKey: boolean;
    altKey: boolean;
    srcEvent: KeyboardEvent;
};
export declare namespace Tab {
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        tabIndex: number;
        ariaLabel: string;
        closable: "auto" | "custom" | "";
        name: string;
        isCrossVisible: boolean;
        private _disabled;
        get disabled(): boolean;
        set disabled(value: boolean);
        private _selected;
        get selected(): boolean;
        set selected(value: boolean);
        vertical: boolean;
        viewportHidden: boolean;
        static get styles(): import("lit-element").CSSResult[];
        handleClick(event: MouseEvent): void;
        handleCrossKeydown(event: KeyboardEvent): void;
        handleCrossClick(event: MouseEvent | KeyboardEvent): void;
        private handleCrossEventDispatch;
        private notifySelectedTab;
        protected update(changedProperties: PropertyValues): void;
        connectedCallback(): void;
        protected firstUpdated(changedProperties: PropertyValues): void;
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-tab": Tab.ELEMENT;
    }
}

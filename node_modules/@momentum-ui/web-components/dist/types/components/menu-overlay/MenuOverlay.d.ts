/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
export declare enum OverlaySizes {
    small = "260px",
    large = "370px"
}
export declare const menuOverlaySize: readonly ["small", "large"];
export declare const menuOverlayPlacement: readonly ["left-start", "left", "left-end", "right-start", "right", "right-end", "top-start", "top", "top-end", "bottom-start", "bottom", "bottom-end"];
export declare namespace MenuOverlay {
    export type Size = typeof menuOverlaySize[number];
    export type Placement = typeof menuOverlayPlacement[number];
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusTrapMixin").AnyConstructor<import("../../mixins/FocusTrapMixin").FocusTrapClass & import("../../mixins/FocusTrapMixin").FocusTrapInterface & import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        private _isOpen;
        get isOpen(): boolean;
        set isOpen(newValue: boolean);
        size: MenuOverlay.Size;
        maxHeight: string;
        customWidth: string;
        showArrow: boolean;
        disabled: boolean;
        placement: MenuOverlay.Placement;
        overlayContainer: HTMLDivElement;
        arrow: HTMLDivElement;
        trigger?: NodeListOf<HTMLElement>;
        private popperInstance;
        private triggerElement;
        private renderMaxHeight;
        private renderWidth;
        private getStyles;
        connectedCallback(): void;
        disconnectedCallback(): void;
        protected firstUpdated(changedProperties: PropertyValues): Promise<void>;
        protected update(changedProperties: PropertyValues): void;
        protected updated(changedProperties: PropertyValues): void;
        private dispatchMenuOpen;
        private dispatchMenuClose;
        private handleInstance;
        private create;
        private destroy;
        private handleTriggerClick;
        private toggleOverlay;
        handleOutsideOverlayKeydown: (event: KeyboardEvent) => Promise<void>;
        handleTriggerKeyDown: (event: KeyboardEvent) => Promise<void>;
        private focusOnTrigger;
        private focusInsideOverlay;
        handleOutsideOverlayClick: (event: MouseEvent) => void;
        static get styles(): import("lit-element").CSSResult[];
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-menu-overlay": MenuOverlay.ELEMENT;
    }
}

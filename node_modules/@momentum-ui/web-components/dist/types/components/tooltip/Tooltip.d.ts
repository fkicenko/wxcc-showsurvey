/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
export declare const tooltipPlacement: readonly ["auto", "auto-start", "auto-end", "left-start", "left", "left-end", "right-start", "right", "right-end", "top-start", "top", "top-end", "bottom-start", "bottom", "bottom-end"];
export declare const tooltipStrategy: readonly ["fixed", "absolute"];
export declare type TooltipEvent = {
    placement: Tooltip.Placement;
    reference: HTMLElement;
    popper: HTMLElement;
    slotContent?: Element[] | undefined | null;
};
export declare namespace Tooltip {
    export type Placement = typeof tooltipPlacement[number];
    export type Strategy = typeof tooltipStrategy[number];
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        message: string;
        placement: Tooltip.Placement;
        disabled: boolean;
        opened: boolean;
        popper: HTMLDivElement;
        reference: HTMLDivElement;
        private slotContent;
        protected handleFocusIn(event: Event): void;
        protected handleFocusOut(event: Event): void;
        private openTooltip;
        private closeTooltip;
        private changeMessage;
        private changeSlotContent;
        notifyTooltipCreate(): void;
        notifyTooltipDestroy(): void;
        handleSlotContentChange(event: Event): void;
        protected updated(changedProperties: PropertyValues): void;
        private get tooltipClassMap();
        render(): import("lit-element").TemplateResult;
        static get styles(): import("lit-element").CSSResult[];
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-tooltip": Tooltip.ELEMENT;
    }
}

/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement } from "lit-element";
import "@/components/button/Button";
export declare const iconSize: readonly ["16", "20", "36", "56", 16, 20, 36, 56];
export declare const iconType: readonly ["", "white"];
export declare namespace Icon {
    type Size = typeof iconSize[number];
    type Type = typeof iconType[number];
    type ButtonProperty = {
        [key: string]: string;
    };
    class ELEMENT extends LitElement {
        color: string;
        description: string;
        name: string;
        id: string;
        size: string;
        sizeOverrided: boolean;
        title: string;
        type: string;
        isActive: boolean;
        isComboBoxIcon: boolean;
        _ariaLabel: string;
        get ariaLabel(): string;
        set ariaLabel(value: string);
        get buttonClassMap(): {
            [x: string]: boolean;
        };
        consoleHandler: (message: string, data: string) => void;
        get iconFontSize(): string | 16;
        get iconColor(): any;
        get iconClassMap(): {
            [x: string]: boolean;
            "md-combobox-input__icon": boolean;
            "md-combobox-input__icon--active": boolean;
        };
        get iconName(): string | void;
        get iconStyleMap(): {
            color?: any;
            "font-size"?: string;
        };
        static get styles(): import("lit-element").CSSResult[];
        handleIconClick(event: MouseEvent): void;
        render(): import("lit-element").TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-icon": Icon.ELEMENT;
    }
}

/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { numInputTypes } from "../../utils/enums";
import { CSSResultArray, LitElement, PropertyValues } from "lit-element";
import "@/components/input/Input";
import { Input } from "../input/Input";
export declare const alignment: readonly ["left", "right", "center"];
export declare namespace EditableTextfield {
    type Alignment = typeof alignment[number];
    type InputType = typeof numInputTypes[number];
    class ELEMENT extends LitElement {
        alignment: EditableTextfield.Alignment;
        disabled: boolean;
        isEditing: boolean;
        maxLines: string;
        content: string;
        message: Input.Message | undefined;
        alert: boolean;
        hideMessage: boolean;
        pattern: string;
        type: EditableTextfield.InputType[number] | null;
        ariaLabel: string;
        ariaDescribedBy: string;
        private readonly messageController;
        editableField: HTMLElement | undefined;
        connectedCallback(): void;
        disconnectedCallback(): void;
        protected firstUpdated(changedProperties: PropertyValues): void;
        protected updated(changedProperties: PropertyValues): void;
        reportValidity: () => void;
        checkValidity: (input: string) => boolean;
        handleFocus: () => void;
        setRange(): void;
        handleKeydown: (e: KeyboardEvent) => void;
        handleBlur: () => void;
        handleValidation(): void;
        showAlert(): void;
        static get styles(): CSSResultArray;
        get overflowStyles(): string | false | 0;
        messagesTemplate(): {};
        render(): import("lit-element").TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-editable-field": EditableTextfield.ELEMENT;
    }
}

/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import "@/components/icon/Icon";
import { LitElement, PropertyValues } from "lit-element";
export declare namespace Dropdown {
    type OptionMember = {
        [key: string]: string;
    };
    type Option = string | OptionMember;
    export type EventDetail = {
        "dropdown-focus-in": undefined;
        "dropdown-focus-out": undefined;
        "dropdown-selected": {
            option: Option;
        };
    };
    const ELEMENT_base: typeof LitElement & import("../../mixins/FocusMixin").AnyConstructor<import("../../mixins/FocusMixin").FocusClass>;
    export class ELEMENT extends ELEMENT_base {
        title: string;
        options: Option[];
        optionId: string;
        optionValue: string;
        defaultOption: Option;
        disabled: boolean;
        allowUnselected: boolean;
        visibleOptions: number;
        private renderOptions;
        private selectedKey;
        private expanded;
        private focusedIndex;
        label: HTMLLabelElement;
        optionsList: HTMLUListElement;
        optionsListItems?: HTMLLIElement[];
        private lastMaxHeight;
        connectedCallback(): void;
        disconnectedCallback(): void;
        protected firstUpdated(changedProperties: PropertyValues): void;
        protected updated(changedProperties: PropertyValues): void;
        updateRenderOptions(): void;
        updateListDOM(): Promise<void>;
        resizeDropdownList(): Promise<void>;
        protected handleFocusIn(event: Event): void;
        protected handleFocusOut(event: Event): void;
        static get styles(): import("lit-element").CSSResult[];
        setupEvents(): void;
        teardownEvents(): void;
        expand(): void;
        collapse(): void;
        toggle(): void;
        select(): void;
        onOutsideClick: (e: MouseEvent) => void;
        onKeyDown: (e: KeyboardEvent) => void;
        onLabelClick(): void;
        focusFirst(): void;
        focusLast(): void;
        focusNext(): void;
        focusPrev(): void;
        focusToIndex(n: number): void;
        focusReset(): void;
        scrollToIndex(n: number): Promise<void>;
        getOptionKeyValuePair(option: Option): {
            key: string;
            value: string;
        };
        get labelTitle(): string;
        get dropDownClassMap(): {
            "md-dropdown__expanded": boolean;
        };
        render(): import("lit-element").TemplateResult;
    }
    export {};
}
declare global {
    interface HTMLElementTagNameMap {
        "md-dropdown": Dropdown.ELEMENT;
    }
}

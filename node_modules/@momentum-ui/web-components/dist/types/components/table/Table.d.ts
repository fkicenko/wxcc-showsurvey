/**
 * Copyright (c) Cisco Systems, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import { LitElement, PropertyValues } from "lit-element";
export declare const formatType: readonly ["number", "default"];
declare type Warn = {
    [key: number]: any;
};
export declare namespace Table {
    type Format = typeof formatType[number];
    class ELEMENT extends LitElement {
        tabledata: string;
        zebra: boolean;
        clean: boolean;
        sorting: boolean;
        nodata: string;
        stickheader: boolean;
        label: string;
        noBorders: boolean;
        format: Table.Format;
        warning: (any | Warn)[];
        errors: (any | Warn)[];
        private sort;
        csvData: any;
        rowTable?: HTMLTableRowElement[];
        headerRow: any;
        results: any;
        config: {
            quoteChar: string;
            escapeChar: string;
            header: boolean;
            preview: number;
            comments: boolean;
            step: undefined;
            complete: undefined;
            download: boolean;
        };
        connectedCallback(): void;
        get rowItem(): HTMLTableRowElement[] | undefined;
        linkCellItems(): void;
        sortTab(ev: Event, key: any): void;
        protected update(changedProperties: PropertyValues): void;
        static get styles(): import("lit-element").CSSResult[];
        get tableClassMap(): {
            "md-table--clean": boolean;
            "md-table--no-borders": boolean;
            "md-table--stripped": boolean;
            "md-table--sorting": boolean;
        };
        render(): import("lit-element").TemplateResult;
    }
}
declare global {
    interface HTMLElementTagNameMap {
        "md-table": Table.ELEMENT;
    }
}
export {};

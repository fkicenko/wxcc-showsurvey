import { Utility } from "@agentx/agentx-mfe-react-based";
import { TaskList } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare class ModuleChat {
    chatMessage: Service.Cms.ChatResponseDataListAttributes[];
    chatMessagesMapping: Service.Cms.ChatResponseMappingDataListAttributes[];
    mediaViewInitState: {
        state: string;
    };
    retryMediaViewInit: number;
    removeMediaListener: boolean;
    hasCustomerLeft: Map<string, boolean>;
    isConvNotFound: Map<string, boolean>;
    unreadMessages: Map<string, TaskList.UnreadChatMessage>;
    get unReadMessagesObject(): Map<string, TaskList.UnreadChatMessage>;
    get mediaViewOption(): {
        accessToken: string;
        refreshToken: string;
        clientId: string;
        clientSecret: string;
        retryMediaViewInit: number;
        removeMediaListener: boolean;
    };
    setChatMessagesMapping(chatMessagesMapping: Service.Cms.ChatResponseMappingDataListAttributes[]): void;
    setChatMessages(chatMessages: Service.Cms.ChatResponseDataListAttributes[]): void;
    isChatConvActive(convId: string): boolean;
    setUnreadMessages(data: Utility.MediaDetails): void;
    getUnreadMessagesFromSessionStorage(data: Record<string, TaskList.UnreadChatMessage> | null): void;
    updateRemoveMediaListeners(status: boolean): void;
    updateHasCustomerLeft(convId: string): void;
    updateIsConvNotFound(convId: string, status: boolean): void;
    deleteUnreadMessages(taskId: string): void;
    clearAllUnreadMessagesFromStore(): void;
    setMediaViewInitState(mediaState: Utility.MediaViewState): void;
    get chatMessages(): Service.Cms.ChatResponseDataListAttributes[];
    get chatMessagesMappings(): Service.Cms.ChatResponseMappingDataListAttributes[];
    get mediaInitState(): {
        state: string;
    };
    setRetryMediaViewInit(): void;
}

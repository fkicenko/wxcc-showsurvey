import { TaskList } from "@agentx/agentx-mfe-wc-based";
import { Service } from "@agentx/agentx-services";
export declare const TASKS: TaskList.Task[];
export declare const callEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const flatTaskForCall: {
    additionalDetails: string;
    appUser: string;
    category: string;
    mediaType: string;
    mediaChannel: string;
    customerName: string;
    customerNumber: string;
    ani: string;
    orgId: string;
    owner: string;
    interactionId: string;
    mediaResourceId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    consultMediaResourceId: string;
    isTerminated: boolean;
    agentId: string;
    ownerName: string;
    ownerPhoneNumber: string;
    isWrapUp: boolean;
    hasJoined: boolean;
    phoneNumber: string;
    dnis: string;
    virtualTeamName: string;
    ivrPath: string;
    pathId: string;
    ronaTimeout: string;
    isConferencing: boolean;
    isRecordingPaused: boolean;
    isPauseResumeEnabled: boolean;
    isRecorded: boolean;
    contactDirection: string;
    isHold: boolean;
    ctqInProgress: boolean;
    outdialTransferToQueueEnabled: boolean;
    queueId: string;
    sourceNumber: string;
    sourcePage: string;
    recordingPauseDuration: undefined;
    destAgentId: string;
    destAgentName: undefined;
    destAgentPhoneNumber: undefined;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const baseTaskForTaskList: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    interactionId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    dnis: string;
    virtualTeamName: string;
    isConferencing: boolean;
    contactDirection: string;
    isHold: boolean;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const consultToDNTask: {
    eventType: string;
    agentId: string;
    trackingId: string;
    destinationType: string;
    interaction: {
        isFcManaged: boolean;
        isTerminated: boolean;
        mediaType: string;
        previousVTeams: string[];
        state: string;
        currentVTeam: string;
        participants: {
            "+19997770096": {
                id: string;
                pType: string;
                type: string;
            };
            "16839506-7c48-4a71-ba1b-d585e5d37607": {
                name: string;
                pType: string;
                teamName: string;
                lastUpdated: number;
                teamId: string;
                joinTimestamp: number;
                isConsulted: boolean;
                hasJoined: boolean;
                consultTimestamp: number;
                dn: string;
                queueId: string;
                id: string;
                sessionId: string;
                consultState: string;
                queueMgrId: string;
                siteId: string;
                type: string;
                channelId: string;
                wrapUpTimestamp: null;
                isWrapUp: boolean;
            };
            9997770099: {
                id: string;
                pType: string;
                type: string;
            };
        };
        interactionId: string;
        orgId: string;
        callProcessingDetails: {
            QMgrName: string;
            pauseResumeEnabled: string;
            taskToBeSelfServiced: string;
            ani: string;
            recordInProgress: string;
            pauseDuration: string;
            dnis: string;
            tenantId: string;
            QueueId: string;
            vteamId: string;
            jscriptId: string;
            customerName: string;
            virtualTeamName: string;
            ronaTimeout: string;
            category: string;
            reason: string;
            sourceNumber: string;
            sourcePage: string;
            appUser: string;
            customerNumber: string;
            reasonCode: string;
            IvrPath: string;
            pathId: string;
            fromAddress: string;
        };
        media: {
            "49bcf26b-ec75-4351-89fa-55d54682c20c": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: number;
            };
            "cd5ec9da-202c-4b22-847d-dbf5aafda414": {
                mediaResourceId: string;
                mediaType: string;
                mediaMgr: string;
                participants: string[];
                mType: string;
                isHold: boolean;
                holdTimestamp: null;
            };
        };
        owner: string;
        mediaChannel: string;
        contactDirection: {
            type: string;
        };
        callFlowParams: {
            Play2: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
            Queue3: {
                name: string;
                qualifier: string;
                description: string;
                valueDataType: string;
                value: string;
            };
        };
    };
    interactionId: string;
    orgId: string;
    queueMgr: string;
    consultMediaResourceId: string;
    type: string;
    destAgentId: string;
    mediaResourceId: string;
    owner: string;
    isConferencing: boolean;
};
export declare const BaseTaskForDN: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    orgId: string;
    owner: string;
    interactionId: string;
    mediaResourceId: string;
    isConsulted: boolean;
    state: string;
    destAgentId: string;
    consultHold: boolean;
    consultMediaResourceId: string;
    isTerminated: boolean;
    agentId: string;
    ownerName: string;
    ownerPhoneNumber: string;
    isWrapUp: boolean;
    hasJoined: boolean;
    phoneNumber: string;
    dnis: string;
    virtualTeamName: string;
    ivrPath: string;
    pathId: string;
    ronaTimeout: string;
    isConferencing: boolean;
    isRecordingPaused: boolean;
    isRecorded: boolean;
    isPauseResumeEnabled: boolean;
    recordingPauseDuration: string;
    contactDirection: string;
    isHold: boolean;
    ctqInProgress: boolean;
    outdialTransferToQueueEnabled: boolean;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const baseTaskForDNforTaskList: {
    mediaType: string;
    mediaChannel: string;
    ani: string;
    interactionId: string;
    isConsulted: boolean;
    state: string;
    consultHold: boolean;
    dnis: string;
    virtualTeamName: string;
    isConferencing: boolean;
    contactDirection: string;
    isHold: boolean;
    timeStamp: number;
    consultTimeStamp: number;
};
export declare const agentContactEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const stationLoginSuccessResponse: {
    dn: string;
    agentId: string;
    usesOtherDN: boolean;
    teamId: string;
    teamName: string;
    subStatus: string;
    lastIdleCodeChangeTimestamp: number;
    lastStateChangeTimestamp: number;
    profileType: string;
    mmProfile: {
        voiceCount: number;
        chatCount: number;
        emailCount: number;
        socialCount: number;
    };
    interactionIds: never[];
};
export declare const profileMockData: Service.Conf.Profile;
export declare const emailOfferEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const chatEvent: Service.Aqm.Contact.AgentContact["data"];
export declare const logoutEvent: Service.Aqm.Agent.LogoutSuccess["data"];

import "./components/ConnectionLost";
import "./components/CssDynamic";
import { MobxLitElement } from "@adobe/lit-mobx";
import "@agentx/agentx-mfe-react-based";
import "@agentx/agentx-mfe-wc-based";
import { ErrorModal, StationLogin } from "@agentx/agentx-mfe-wc-based";
import "@momentum-ui/web-components";
import { OAuth } from "@uuip/unified-ui-platform";
import "./components/ChangeTeamLoading";
declare const App_base: typeof MobxLitElement & (new (...args: any[]) => import("@uuip/unified-ui-platform-sdk").I18N.I18nElement);
export declare class App extends App_base {
    private isInitialized;
    private readonly isIframe;
    private isLoggedIn;
    private isConnectionLost;
    private isRestoreFailed;
    private isrequestedIframeLogin;
    private isMultiLogin;
    private cachedLayoutConfig;
    private isNotifsSuccess;
    /**
     * Init Routing
     */
    private readonly agentXAppRouting;
    private agentXRoutingStart;
    private agentXRoutingStop;
    shouldCollapseTaskListWhenResized: () => boolean;
    onResize: () => void;
    /**
     * End init routing
     */
    connectedCallback(): Promise<void>;
    updateResponsiveList(e: any): void;
    onCiLoginSuccess(token: OAuth.Token): Promise<void>;
    private handleConnectionLost;
    private requestIframeLogin;
    disconnectedCallback(): void;
    static get styles(): import("lit-element").CSSResult;
    stationLoginSuccess(e: StationLogin.ESuccess): Promise<void>;
    stationLoginError(e: StationLogin.EError): void;
    errorModalDisplay(e: ErrorModal.EModalShow): void;
    createAnalyzerSession(): {};
    updateWxmSettings(token: OAuth.Token): void;
    render(): import("lit-element").TemplateResult;
}
export {};

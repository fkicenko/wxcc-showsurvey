import { AgentXStore, Store } from "../../store/index";
import { Router } from "@uuip/unified-ui-platform";
export declare enum RouteName {
    HOME = "home",
    TASK = "task",
    APS = "aps",
    METRICS = "metrics"
}
export declare const RoutePath: {
    home: string;
    task: string;
    aps: string;
    metrics: string;
};
declare type AgentXAppRoutingConfig = {
    onRoutingUpdate?: () => Promise<unknown>;
};
declare class AgentXAppRouting {
    readonly STORE: AgentXStore;
    private readonly router;
    private mobxSyncReactionDispose;
    private readonly syncFromStoreToRouter;
    private readonly syncFromRouterToStore;
    private config?;
    private viewMapFactory;
    constructor(router: Router.Service, STORE: AgentXStore);
    private notifyRoutingUpdate;
    private findRemovedItems;
    private findNewlyAddedItems;
    private updateView;
    get view(): Router.RouterView.BlocksMap;
    start(config?: AgentXAppRoutingConfig): void;
    stop(): void;
    navigate<DynamicRouteName extends string = never>(routeName: RouteName | DynamicRouteName, routeValues: Router.RouteValues): Promise<void>;
    addDynamicRoutes(): Promise<void>;
    updateDynamicRoutes(cachedLayoutConfig?: Store.Dynamic.ConfigJson): Promise<void>;
    private syncRoutesWithServerUpdates;
}
export declare const createAgentXAppRouting: (STORE: AgentXStore) => AgentXAppRouting;
export {};

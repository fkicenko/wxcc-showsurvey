import { Service } from "../../index";
import Cms = Service.Cms;
export declare function cmsService(): {
    fetchCustomerResources: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.Customer>) => void) | undefined) => Promise<Cms.Customer>;
    fetchChatResponseMapping: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.ChatResponseMapping>) => void) | undefined) => Promise<Cms.ChatResponseMapping>;
    fetchChatResponses: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.ChatResponses>) => void) | undefined) => Promise<Cms.ChatResponses>;
    fetchSplitIOAuthKey: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.SplitIOKey>) => void) | undefined) => Promise<Cms.SplitIOKey>;
    fetchAllTeams: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.TeamResponseMapping>) => void) | undefined) => Promise<Cms.TeamResponseMapping>;
    fetchDesktopLayout: (p: {
        tenantId: string;
        desktopLayoutId?: string | undefined;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.DesktopLayoutResponseMapping>) => void) | undefined) => Promise<Cms.DesktopLayoutResponseMapping>;
    fetchGlobalDesktopLayout: (p: {
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.GlobalDesktopLayoutResponseMapping>) => void) | undefined) => Promise<Cms.GlobalDesktopLayoutResponseMapping>;
    fetchTeamsByAgent: (p: {
        userId: string;
        tenantId: string;
    }, cb?: ((res: import("axios").AxiosResponse<Cms.fetchTeamsByAgentResponse>) => void) | undefined) => Promise<Cms.fetchTeamsByAgentResponse>;
};
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.cms": "Service.cms.fetchCustomerResources" | "Service.cms.fetchChatResponses" | "Service.cms.fetchChatResponseMapping" | "Service.cms.fetchSplitIOAuthKey" | "Service.cms.fetchAllTeams" | "Service.cms.fetchDesktopLayout" | "Service.cms.fetchDefaultDesktopLayout" | "Service.cms.fetchTeamsByAgent";
        }
    }
}
declare module "../../index" {
    namespace Service.Cms {
        type Customer = {
            auxiliaryDataList: CustomerDataList[];
            auxiliaryMetadata: any /** TODO: add metaData type */;
        };
        type ChatResponseMapping = {
            auxiliaryDataList: ChatResponseMappingDataList[];
            auxiliaryMetadata: any /** TODO: add metaData type */;
        };
        type ChatResponses = {
            auxiliaryDataList: ChatResponseDataList[];
            auxiliaryMetadata: any /** TODO: add metaData type */;
        };
        type CustomerDataList = {
            attributes: CustomerDataListAttributes;
            auxiliaryDataType: string;
            id: string;
            type: "customer";
        };
        type CustomerDataListAttributes = {
            allowAgentThresholds__i: number;
            allowAgentToAccessRecordings__i: number;
            analyticsEnabled__i: number;
            campaignManagerEnabled__i: number;
            cccEnabled__i: number;
            cfbEnabled__i: number;
            checkAgentAvailability__i: number;
            city__s: string;
            configureSpeechEnabledIVREnabled__i: number;
            configureWebCallbackEnabled__i: number;
            country__s: string;
            cstts: number;
            dbId__l: number;
            domain__s: string;
            email__s: string;
            externalId__s: string;
            firstName__s: string;
            inboundMaximumActiveCalls__l: number;
            ivrParkUrl__s: string;
            jukeboxEnabled__i: number;
            lastAgentRouting__i: number;
            lastName__s: string;
            legRecordingEnabled__i: number;
            license__s: string;
            lostCallThreshold__l: number;
            mapViewEnabled__i: number;
            maxChannels__l: number;
            maximumActiveAgents__i: number;
            maximumActiveCalls__l: number;
            maximumAddressBooks__i: number;
            maximumCallbackAttempts__i: number;
            maximumSkills__i: number;
            maximumTextSkills__i: number;
            maximumThresholdRules__i: number;
            maximumUsers__i: number;
            maximumVirtualTeams__i: number;
            mobile__s: string;
            multiMediaEnabled__i: number;
            multipleTimeZoneEnabled__i: number;
            numberOfCadVariables__i: number;
            offerCode__s: string;
            orderId__s: string;
            orderSubscriptionId__s: string;
            outdialMaximumActiveCalls__l: number;
            pauseResumeEnabled__i: number;
            permitAlert__i: number;
            postalCode__s: string;
            pruningStrategy__s: string;
            pruningValue__i: number;
            publishAgentCommandEvents__i: number;
            publishAgentDetailedValues__i: number;
            publishAgentEvents__i: number;
            publishCallEvents__i: number;
            publishDynamicQueuedValues__i: number;
            publishQueuedValues__i: number;
            recordAllCalls__i: number;
            recordingPauseDuration__i: number;
            resourcesCreated__i: number;
            retryCallbackInterval__i: number;
            samCdxDataCompression__i: number;
            samDataCompressionType__s: string;
            samIdxDataCompression__i: number;
            sbrEnabled__i: number;
            seatMapEnabled__i: number;
            serviceProvisioningId__s: string;
            serviceType__s: string;
            shortCallThreshold__l: number;
            shortHandleThreshold__l: number;
            sid: string;
            siteLevelTfnEnabled__i: number;
            socialChannel__i: number;
            state__s: string;
            street__s: string;
            tenantId__s: string;
            tenantXmlUrl__s: string;
            thirdPartyEnabled__i: number;
            thresholdAlertsEnabled__i: number;
            tid: string;
            voiceCallBackEnabled__i: number;
            voicePrefix__s: string;
            webCallBackEnabled__i: number;
            wfoEnabled__i: number;
            work__s: string;
            _lmts__l: number;
            _type__s: "customer";
        };
        type ChatResponseMappingDataList = {
            attributes: ChatResponseMappingDataListAttributes;
            auxiliaryDataType: string;
            id: string;
            type: "chat-message-mapping";
        };
        type ChatResponseMappingDataListAttributes = {
            allQueues__i: number;
            cstts: number;
            language__s: string;
            messageId__s: string;
            tid: string;
            vteamDbId__l: number;
            vteamId__s: string;
            _lmts__l: number;
            _type__s: string;
        };
        type ChatResponseDataList = {
            attributes: ChatResponseDataListAttributes;
            auxiliaryDataType: string;
            id: string;
            type: "chat-message";
        };
        type ChatResponseDataListAttributes = {
            content__s: string;
            cstts: number;
            language__s: string;
            name__s: string;
            status__i: number;
            tid: string;
            _lmts__l: number;
            _type__s: string;
        };
        type SplitIOKey = {
            key: string;
        };
        type TeamResponseMapping = {
            auxiliaryDataList: TeamAuxiliaryData[];
            auxiliaryMetadata: any;
        };
        type DesktopLayoutResponseMapping = {
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryMetadata: any;
        };
        type GlobalDesktopLayoutResponseMapping = {
            auxiliaryDataList: DesktopLayoutAuxiliaryData[];
            auxiliaryMetadata: any;
        };
        type TeamAuxiliaryData = {
            id: string;
            type: "team";
            attributes: TeamAuxiliaryDataAttributes;
        };
        type fetchTeamsByAgentResponse = {
            details: {
                user: TeamsByAgentMap;
            };
        };
        type TeamsByAgentMap = {
            id: string;
            type: "user";
            attributes: TeamByAgentAuxiliaryDataAttributes;
        };
        type DesktopLayoutAuxiliaryData = {
            id: string;
            type: "desktop-layout";
            attributes: DesktopLayoutAuxiliaryDataAttributes;
            auxiliaryDataType: string;
        };
        type TeamAuxiliaryDataAttributes = {
            desktopLayoutId__s: string;
            siteId__s: string;
            name__s: string;
            status__i: number;
            _type__s: string;
            tid: string;
            dbId__l: number;
            sid: string;
        };
        type TeamByAgentAuxiliaryDataAttributes = {
            teamInfo__s: any;
        };
        type DesktopLayoutAuxiliaryDataAttributes = {
            description__s: string;
            jsonFileContent__s: string;
            global__i: number;
            assigned__i: number;
            editedBy__s: string;
            name__s: string;
            cstts: number;
            status__i: number;
            tid: string;
            validatedTime__l: number;
            sid: string;
        };
    }
}

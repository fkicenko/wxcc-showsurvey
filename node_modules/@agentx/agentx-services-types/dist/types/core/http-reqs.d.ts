import { Err } from "@uuip/unified-ui-platform-sdk";
import { AxiosError, AxiosResponse, Method } from "axios";
export declare class HttpReqs {
    private readonly host;
    constructor(host: string);
    req<TRes, TReq>(c: Conf<TRes, TReq>): Res<TRes, TReq>;
    reqEmpty<TRes>(c: ConfEmpty<TRes>): ResEmpty<TRes>;
    private createPromise;
}
declare module "@uuip/unified-ui-platform-sdk" {
    namespace Err {
        interface Ids {
            "Service.http.reqs": "Service.http.reqs.GenericRequestError";
        }
    }
}
declare type Req<TRes> = {
    url: string;
    res: TRes;
    err?: Err.IdsMessage | ((e: AxiosError) => Err.Message | Err.Details<Err.IdsDetails>);
    data?: any;
    headers?: Record<string, string>;
    method?: Method;
    responseType?: "arraybuffer" | "stream" | "blob" | "json" | "document" | "text";
};
declare type Conf<TRes, TReq> = (p: TReq) => Req<TRes>;
declare type ConfEmpty<TRes> = () => Req<TRes>;
declare type Res<TRes, TReq> = (p: TReq, cb?: CbRes<TRes>) => Promise<TRes>;
declare type ResEmpty<TRes> = (cb?: CbRes<TRes>) => Promise<TRes>;
declare type CbRes<TRes> = (res: AxiosResponse<TRes>) => void;
export {};
